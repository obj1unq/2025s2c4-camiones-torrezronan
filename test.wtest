import camion.*
import cosas.*

describe "Test de prueba"  {

    test "Casos Prueba"{
        arenaGranel.peso(50)
        camion.cargar(arenaGranel)
        camion.cargar(bumblebee)
        assert.equals(true, camion.hayAlgoQuePese(50))
        assert.equals(true, camion.hayAlgoQuePese(800))
        assert.equals(false, camion.hayAlgoQuePese(500))
        assert.equals(true, camion.todosSonPares())
        assert.equals(1850, camion.pesoTotal())
        assert.equals(false, camion.tieneExcesoDePeso())
        assert.equals(arenaGranel, camion.elDeNivel(1))
    }


    test "test de niveles" {
        camion.cargar(bateriaAntiAerea)
        camion.cargar(knightRider)
        assert.equals(#{bateriaAntiAerea}, camion.superaNivel(15))
        assert.equals(#{bateriaAntiAerea,knightRider}, camion.superaNivel(2))
        assert.equals(#{}, camion.superaNivel(200))
        assert.equals(#{bateriaAntiAerea}, camion.superaElNivelDe(bumblebee))
        assert.equals(#{bateriaAntiAerea,knightRider}, camion.superaElNivelDe(ladrillos))
    }


    test "puede circular" {

        camion.cargar(bumblebee)
        ladrillos.cantidadDeLadrillos(300)
        camion.cargar(ladrillos)
        assert.equals(true, camion.puedeCircularSegunNivel(20))
        ladrillos.cantidadDeLadrillos(400)
        camion.descargar(ladrillos)
        camion.cargar(ladrillos)
        assert.equals(false, camion.puedeCircularSegunNivel(20))
    }

    test "contenedor" {
        contenedorPortuario.ponerDentro(knightRider)
        assert.equals(600, contenedorPortuario.peso())
        assert.equals(10, contenedorPortuario.nivelPeligrosidad())        
    }
    
    test "tiene algo entre 2" {
        camion.cargar(bumblebee)
        ladrillos.cantidadDeLadrillos(300)
        camion.cargar(ladrillos)
        assert.equals(true, camion.tieneAlgoEntre(5,700))
        assert.equals(false,camion.tieneAlgoEntre(900,1000))
        assert.equals(bumblebee,camion.laCosaMasPesada())
    }

    test "test Bultos que ocupan caso 1" {
        contenedorPortuario.ponerDentro(knightRider)
        contenedorPortuario.ponerDentro(bumblebee)
        embalaje.envuelve(residuosRadiactivos)
        camion.cargar(contenedorPortuario)
        camion.cargar(embalaje)
        camion.cargar(arenaGranel)
        ladrillos.cantidadDeLadrillos(50)
        camion.cargar(ladrillos)
        bateriaAntiAerea.estado(0)
        camion.cargar(bateriaAntiAerea)
        assert.equals(9, camion.cantidadDeBultos())
    }


    test "test Bultos Caso 2" {
        ladrillos.cantidadDeLadrillos(150)
        camion.cargar(ladrillos)
        bateriaAntiAerea.estado(1)
        camion.cargar(bateriaAntiAerea)
        camion.cargar(contenedorPortuario)
        assert.equals(5, camion.cantidadDeBultos())
    }


    test "test bultos caso 3" {
        ladrillos.cantidadDeLadrillos(350)
        camion.cargar(ladrillos)
        camion.cargar(arenaGranel)
        assert.equals(4, camion.cantidadDeBultos())
    }


    test "Choques caso 1" {
        contenedorPortuario.ponerDentro(knightRider)
        contenedorPortuario.ponerDentro(bumblebee)
        residuosRadiactivos.peso(30)
        embalaje.envuelve(residuosRadiactivos)
        arenaGranel.peso(50)
        ladrillos.cantidadDeLadrillos(100)
        bateriaAntiAerea.estado(1)
        camion.cargar(contenedorPortuario)
        camion.cargar(residuosRadiactivos)
        camion.cargar(embalaje)
        camion.cargar(arenaGranel)
        camion.cargar(ladrillos)
        camion.cargar(bateriaAntiAerea)
        camion.choco()
        assert.equals(0, bumblebee.estado())
        assert.equals(45, residuosRadiactivos.peso()) // en el ejemplo dice que espera 30 pero no da si lleva 30 y al chocar se le agregan 15k
        assert.equals(70, arenaGranel.peso())
        assert.equals(88, ladrillos.cantidadDeLadrillos())
        assert.equals(0, bateriaAntiAerea.estado())
    }
}

